#Task 1

#Practice asynchronous code

#Create a separate asynchronous code to calculate Fibonacci, factorial, squares and cubic for an input number. 
#Schedule the execution of this code using asyncio.gather for a list of integers from 1 to 10. 
#You need to get four lists of results from corresponding functions.

#Rewrite the code to use simple functions to get the same results but using a multiprocessing library. Time the execution of both realizations, explore the results, what realization is more effective, why did you get a result like this.


import time
import asyncio


async def fibonacci(n):
    if n<0:
        raise ValueError('positive ints only')
    a = 0
    b = 1
    c = 0

    for i in range(n - 1):
        c = a + b
        a = b
        b = c

    return c


async def factorial(n):
    if n<0:
        raise ValueError('positive ints only')

    fact = 1

    for i in range(2, n+1):

        fact *= i

    return fact

async def squares(n):
    if n<0:
        raise ValueError('positive ints only ')

    squares = n**2
    return squares

async def cubic(n):
    if n<0:
        raise ValueError('positive ints only ')

    cubes = n**3

    return cubes

#here we schedule tasks in range 1 to 10

async def process_all_tasks():
    tasks = []
    for i in range(1,11):
        taks.append(asyncio.create_task(fibonacci(i)))
        taks.append(asyncio.create_task(factorial(i)))
        taks.append(asyncio.create_task(squares(i)))
        taks.append(asyncio.create_task(cubcic(i)))

    fib_res, fact_res, squares_res, cubic_res = await asyncio.gather(*tasks)
    return fib_res, fact_res, squares_res, cubic_res


start = time.perf_counter()
asyncio.run(process_all_tasks())

end = time.perf_counter()
print(f"Performance of asyncio calculation: {end-start} seсonds")


######-with multiprocessing - parallel
#використовуючи паралельне обчислення з допомогою модуля multiprocessing 
#з метою порівняння ефективності 

import time
import multiprocessing

def fibmultiP(n):
    a = 0
    b = 1
    c = 0

    for i in range(n - 1):
        c = a + b
        a = b
        b = c

    return c


def factmultiP(n):
    if n<0:
        raise ValueError("positive ints only")

    fact = 1

    for i in range(2, n+1):

        fact *= i

    return fact

def sqrmultiP(n):
    if n<0:
        raise ValueError('positive ints only ')

    squares = n**2
    return squares

def cubmultiP(n):
    if n<0:
        raise ValueError('positive ints only ')

    cubes = n**3

    return cubes

def main():
    numbers = list(range(1,11))

    pool = multiprocessing.Pool()
    #results = []

    fib_reslt = pool.map(fibmultiP, numbers )
    fact_reslt = pool.map(factmultiP, numbers )
    sqr_reslt = pool.map(sqrmultiP, numbers )
    cub_reslt = pool.map(cubmultiP,  numbers )

    #results.append(fib_reslt)
    #results.append(fact_reslt)
    #results.append(sqr_reslt)
    #results.append(cub_reslt)

    #return print(results)
    #[[0, 1, 2, 3, 5, 8, 13, 21, 34, 55], [1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800], [1, 4, 9, 16, 25, 36, 49, 64, 81, 100], [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]]
    print(f"Fibonacci : {fib_reslt}")
    print(f"Factorial : {fact_reslt}")
    print(f"Squares: {sqr_reslt} ")
    print(f"Cubes: {cub_reslt}")

start = time.perf_counter()
if __name__ == "__main__":
    main()
end = time.perf_counter()

print(f'Performance time using parralel multiprocessing is : {end-start} seconds')

#console
#Fibonacci: [0, 1, 2, 3, 5, 8, 13, 21, 34, 55]
#Factorial: [1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800]
#Squares: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
#Cubes: [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]
#Performance time using parralel multiprocessing is: 0.03328942402731627 seconds


#висновок - паралельне обчислення ефективніше тому, що multiprocessing має перевагу у часі виконання



 

#Task 2

#Requests using asyncio and aiohttp

#Download all comments from a subreddit of your choice using URL: https://api.pushshift.io/reddit/comment/search/ . 

#As a result, store all comments in chronological order in JSON and dump them to a file. For this task use asyncio and aiohttp libraries for making requests to Reddit API.

 

#Task 3

#Echo server with asyncio

#Create a socket echo server which handles each connection using asyncio Tasks.
